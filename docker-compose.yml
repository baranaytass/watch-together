version: '3.8'

services:
  web:
    build: 
      context: .
      dockerfile: docker/web.dockerfile
      args:
        - NODE_ENV=production
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:5000
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s

  backend:
    build: 
      context: .
      dockerfile: docker/backend.dockerfile
      args:
        - NODE_ENV=production
    ports:
      - "5000:5000"
      - "9229:9229"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/watchtogether?directConnection=true&serverSelectionTimeoutMS=5000&connectTimeoutMS=10000
      - REDIS_URL=redis://redis:6379
      - PORT=5000
      - NODE_ENV=development
      - FRONTEND_URL=http://localhost:3000
      - MONGODB_RETRY_ATTEMPTS=5
      - MONGODB_RETRY_DELAY=5000
      - MONGODB_CONNECTION_TIMEOUT=30000
      - DEBUG=*
    command: ["node", "--inspect=0.0.0.0:9229", "dist/app.js"]
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=watchtogether
      - GLIBC_TUNABLES=glibc.pthread.rseq=0
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: ["mongod", "--bind_ip_all", "--wiredTigerCacheSizeGB", "1"]
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 64000
        hard: 64000

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    command: ["redis-server", "--appendonly", "yes"]

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
  redis-data:
